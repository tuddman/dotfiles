set nocompatible
filetype off

" Load plugins
source ~/.vim/vimrc.plugins

" Disable beeps
set belloff=all

" Maximum history
set history=1000 

" Scrolling
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Mouse support
set mouse=a

" No swap files
set noswapfile
set nobackup
set nowb

" Persistent undo
if has('persistent_undo') && !isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Automatically re-source .vimrc when it's saved
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost vimrc source $MYVIMRC
augroup END " }

" Tabs and indentation
filetype indent on
set wrap
set shiftwidth=2
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set smartindent
set smarttab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Ignore case unless you uppercase
set ignorecase
set smartcase
" search characters as they're entered
set incsearch
" highlight search matches
set hlsearch
" nnoremap <esc> :noh<return><esc>

" Display relative line numbers
" set relativenumber

" :augroup numbertoggle
" :  autocmd!
" :  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
" :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" :augroup END

" display the absolute line number at the line you're on
set number
" Keep the line number gutter narrow so three digits is cozy. 
set numberwidth=3

" keep cursor in the same column if possible
set nostartofline

" Makes regex work like Perl
nnoremap / /\v
vnoremap / /\v

" Search globally by default
set gdefault

" Autosave on Vim blur
au FocusLost * :wa

" Highlight current column
set cursorline cursorcolumn
" set cursorline ctermbg=LightBlue
hi Cursor guifg=#121212 guibg=#afd700

" Prevents some security issues
set modelines=0

" Color Scheme
filetype on
syntax on
set background=dark
colorscheme solarized8_flat


" ctrl-p fuzzy file search
set runtimepath^=~/.vim/bundle/ctrlp.vim
" Switch ; and :
" noremap ; :
" noremap : ;

set shortmess=a

" JsDoc Options
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1


" START Leader commands
" ----------------
" Change leader from \ to ,
let mapleader=","

" ,space clears the current search term highlighting
nnoremap <leader><space> :noh<cr>

" ,ev edits the .vimrc file
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" ,vs opens a new vertical split and switches to it
nnoremap <leader>vs <C-w>v<C-w>l

" ,nt opens NerdTree
map <leader>nt :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1

" ,gu opens Graphical Undo
nnoremap <leader>gu :GundoToggle<CR>

" ----------------
" END Leader commands


" open on the right so as not to compete with the nerdtree
let g:gundo_right = 1 

" a little wider for wider screens
let g:gundo_width = 60

" NerdTree settings
" ------------------
" Show hidden files
let NERDTreeShowHidden=1

" Launch NerdTree on vim load but don't focus it
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Close vim if only NerdTree is left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ignore system files
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30


" CommandT Settings
" ------------------
" Ignore directories
" let g:CommandTWildIgnore=&wildignore . ",*/bower_components,*/node_modules,*/wp-includes,*/wp-content"
" let g:CommandTTraverseSCM='dir'

" Easymotion settings
" let g:EasyMotion_leader_key = '<Leader>'

" == junegunn/fzf ==
nnoremap <C-T> :FZF<CR>
inoremap <C-T> <ESC>:FZF<CR>i

" File types
" -----------
" SCSS
au BufNewFile,BufRead *.scss set filetype=css.sass

" Javascript
" Libraries for highlighting 
" let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs,angularui,angularuirouter,react,flux,requirejs'

" JSX
let g:jsx_ext_required = 0


" Autocomplete
" -------------
if has('nvim')
  " == Shougo/deoplete.nvim ==
  " == carlitux/deoplete-ternjs ==
  let g:deoplete#enable_at_startup = 1
  let g:SuperTabDefaultCompletionType = "<c-n>"
  " let g:deoplete#sources#flow#flow_bin = g:flow_path
  let g:tern_request_timeout = 1
  let g:tern_show_signature_in_pum = 0
  set completeopt-=preview
endif

" Elixir
" ------------
autocmd BufWritePost *.exs,*.ex silent :!mix format %

" vim-clojure-static
" -------------
let g:clojure_fuzzy_indent = 3

" Emmet
let g:user_emmet_mode='n'    "only enable normal mode functions
" let g:user_emmet_leader_key=','

" rust
" -------------
set hidden
let g:racer_cmd = "/Users/studd/.cargo/bin/racer"
let g:rustfmt_autosave = 1

" for other options:   :help ale-integration-rust
let g:ale_rust_cargo_check_tests = 1

" let g:ycm_language_server =
" \ [
" \   {
" \     'name': 'rust',
" \     'cmdline': ['rust-analyzer'],
" \     'filetypes': ['rust'],
" \     'project_root_files': ['Cargo.toml']
" \   }
" \ ]


augroup Racer
    autocmd!
    autocmd FileType rust nmap <buffer> gd         <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs         <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx         <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <buffer> gt         <Plug>(rust-def-tab)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
    autocmd FileType rust nmap <buffer> <leader>gD <Plug>(rust-doc-tab)
augroup END

" au FileType rust nmap gd <Plug>(rust-def)
" au FileType rust nmap gs <Plug>(rust-def-split)
" au FileType rust nmap gx <Plug>(rust-def-vertical)
" au FileType rust nmap <leader>gd <Plug>(rust-doc)


imap jk <Esc>
