set nocompatible
filetype off

" Load plugins
source ~/.vim/vimrc.plugins

" Disable beeps
set belloff=all

" Maximum history
set history=1000

" Scrolling
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Mouse support
set mouse=a

" No swap files
set noswapfile
set nobackup
set nowb

" Persistent undo
if has('persistent_undo') && !isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Automatically re-source .vimrc when it's saved
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost vimrc source $MYVIMRC
augroup END " }

" Tabs and indentation
filetype indent on
set wrap
set shiftwidth=2
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set smartindent
set smarttab

" Auto indent pasted text
" nnoremap p p=`]<C-o>
" nnoremap P P=`]<C-o>

" Ignore case unless you uppercase
set ignorecase
set smartcase
" search characters as they're entered
set incsearch
" highlight search matches
set hlsearch
nnoremap <esc> :noh<return><esc>

" Display relative line numbers
" set relativenumber

" :augroup numbertoggle
" :  autocmd!
" :  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
" :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" :augroup END

" display the absolute line number at the line you're on
set number
" Keep the line number gutter narrow so three digits is cozy.
set numberwidth=3

" keep cursor in the same column if possible
set nostartofline

" Makes regex work like Perl
nnoremap / /\v
vnoremap / /\v

" Search globally by default
set gdefault

" Autosave on Vim blur
au FocusLost * :wa

" Highlight current column
" set cursorline cursorcolumn

" set cursorline ctermbg=LightBlue
hi Cursor guifg=#121212 guibg=#afd700

" Prevents some security issues
set modelines=0

" Color Scheme
filetype on
syntax on
set background=dark
colorscheme solarized

" ctrl-p fuzzy file search
set runtimepath^=~/.vim/bundle/ctrlp.vim
" Switch ; and :
" noremap ; :
" noremap : ;

set shortmess=a

" JsDoc Options
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1


" START Leader commands
" ----------------
" Change leader from \ to ,
let mapleader=","

" ,space clears the current search term highlighting
nnoremap <leader><space> :noh<cr>

" ,ev edits the .vimrc file
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" ,vs opens a new vertical split and switches to it
nnoremap <leader>vs <C-w>v<C-w>l

" ,nt opens NerdTree
map <leader>nt :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1

" ,gu opens Graphical Undo
nnoremap <leader>gu :GundoToggle<CR>

" END Leader commands
" ----------------


" automatically strip trailing whitespace on :w
autocmd BufWritePre * :%s/\s\+$//e

" open on the right so as not to compete with the nerdtree
let g:gundo_right = 1

" a little wider for wider screens
let g:gundo_width = 60


" NerdTree settings
" ------------------
" Show hidden files
let NERDTreeShowHidden=1

" Launch NerdTree on vim load but don't focus it
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Close vim if only NerdTree is left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Ignore system files
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30


" CommandT Settings
" ------------------
" Ignore directories
" let g:CommandTWildIgnore=&wildignore . ",*/bower_components,*/node_modules,*/wp-includes,*/wp-content"
" let g:CommandTTraverseSCM='dir'

" Easymotion settings
" let g:EasyMotion_leader_key = '<Leader>'

" == junegunn/fzf ==
nnoremap <C-T> :FZF<CR>
inoremap <C-T> <ESC>:FZF<CR>i


" File types
" -----------
" SCSS
au BufNewFile,BufRead *.scss set filetype=css.sass


" Javascript
" -----------
" SCSS
" Libraries for highlighting
" let g:used_javascript_libs = 'jquery,underscore,backbone,angularjs,angularui,angularuirouter,react,flux,requirejs'


" JSX
" -----------
let g:jsx_ext_required = 0


" Autocomplete
" -------------
if has('nvim')
  " == Shougo/deoplete.nvim ==
  " == carlitux/deoplete-ternjs ==
  let g:deoplete#enable_at_startup = 1
  let g:SuperTabDefaultCompletionType = "<c-n>"
  " let g:deoplete#sources#flow#flow_bin = g:flow_path
  let g:tern_request_timeout = 1
  let g:tern_show_signature_in_pum = 0
  set completeopt-=preview
endif


" Elixir
" ------------
au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
au BufRead,BufNewFile mix.lock set filetype=elixir
autocmd BufWritePost *.exs,*.ex,*.heex silent :!mix format %
let g:mix_format_on_save = 1


" vim-clojure-static
" -------------
let g:clojure_fuzzy_indent = 3


" Emmet
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key='<C-Z>'


" Rust
" -------------
set hidden
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

" for other options:   :help ale-integration-rust
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_use_check = 0

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" Prettier
" -------------
command! -nargs=0 Prettier :CocCommand prettier.formatFile
let g:prettier#exec_cmd_path = '~/.vim/plugged/vim-prettier/node_modules/.bin/prettier'
let g:prettier#autoformat = 0
autocmd BufWritePre *.sol Prettier
autocmd BufWritePre *.js Prettier

imap jk <Esc>
